name: Deploy to Production

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "10"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Turbo
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Turbo cache
        uses: actions/cache@v3
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Run linting
        run: pnpm run lint

      - name: Run type checking
        run: pnpm run type-check

      - name: Run tests with coverage
        run: pnpm run test:ci
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

      - name: Check test coverage
        run: |
          # Extract coverage percentage and check if it meets minimum threshold
          COVERAGE=$(node -e "
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-final.json', 'utf8'));
            
            // Calculate total coverage from all files
            let totalLines = 0;
            let coveredLines = 0;
            
            Object.values(coverage).forEach(file => {
              if (file && file.s) {
                Object.values(file.s).forEach(lineCoverage => {
                  totalLines++;
                  if (lineCoverage > 0) {
                    coveredLines++;
                  }
                });
              }
            });
            
            const total = totalLines > 0 ? Math.round((coveredLines / totalLines) * 100) : 0;
            console.log(total);
            if (total < 20) {
              console.error('Coverage below 20% threshold');
              process.exit(1);
            }
          ")
          echo "Test coverage: $COVERAGE%"

      - name: Build application
        run: pnpm run deploy:prod
        env:
          NODE_ENV: production
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 1

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.HOSTINGER_SSH_KEY }}

      - name: Add known hosts
        run: |
          mkdir -p ~/.ssh
          echo "Adding ${{ secrets.HOSTINGER_HOST }} to known hosts..."

          # Try ssh-keyscan with different approaches
          ssh-keyscan -H -p ${{ secrets.HOSTINGER_SSH_PORT }} ${{ secrets.HOSTINGER_HOST }} >> ~/.ssh/known_hosts || {
            echo "⚠️ ssh-keyscan with port failed, trying without port..."
            ssh-keyscan -H ${{ secrets.HOSTINGER_HOST }} >> ~/.ssh/known_hosts || {
              echo "⚠️ ssh-keyscan failed, skipping known_hosts for now..."
              # We'll use StrictHostKeyChecking=no in the SSH command instead
            }
          }

          echo "✅ Known hosts setup complete"

      - name: Deploy to Production
        run: |
          echo "Deploying to production..."

          # Create deployment script
          cat > deploy_production.sh << 'EOF'
          #!/bin/bash
          REMOTE_USER="${{ secrets.HOSTINGER_USER }}"
          REMOTE_HOST="${{ secrets.HOSTINGER_HOST }}"
          REMOTE_PATH="${{ secrets.HOSTINGER_PATH }}"
          SSH_PORT="${{ secrets.HOSTINGER_SSH_PORT }}"

          echo "Production deployment to Hostinger..."

          # Sync everything except videos and images
          rsync -avz --progress --itemize-changes \
            -e "ssh -p $SSH_PORT -o StrictHostKeyChecking=no" \
            --exclude='.DS_Store' \
            dist/ "$REMOTE_USER@$REMOTE_HOST:$REMOTE_PATH/"
            
          echo "Production deployment complete!"
          EOF

          chmod +x deploy_production.sh
          ./deploy_production.sh

      - name: Health check
        run: |
          echo "Performing post-deployment health check..."
          sleep 10
          curl -f ${{ secrets.HEALTH_CHECK_URL }} || exit 1
          echo "Health check passed!"

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Production deployment completed successfully!"
          echo "Deployed commit: ${{ github.sha }}"
          echo "Deployed by: ${{ github.actor }}"
          echo "Deployment time: $(date -u)"

  deploy-failure:
    needs: deploy
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Notify deployment failure
        run: |
          echo "❌ Production deployment failed!"
          echo "Failed commit: ${{ github.sha }}"
          echo "Failed by: ${{ github.actor }}"
          echo "Failure time: $(date -u)"
          # Add your notification logic here (Slack, email, etc.)
